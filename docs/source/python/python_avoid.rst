.. note:: 

    Bonjour, bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour perfectionner vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et obtenez des aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions et concours festifs** : Participez √† des concours et des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_avoid:

√âvitement d'Obstacle
=========================

Dans ce projet, PiCrawler utilise un module ultrasonique pour d√©tecter les obstacles 
devant lui. Lorsque PiCrawler d√©tecte un obstacle, il envoie un signal et cherche une 
autre direction pour continuer √† avancer.

.. image:: img/avoid1.png

**Ex√©cuter le Code**

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picrawler/examples
    sudo python3 avoid.py

Apr√®s l'ex√©cution du code, PiCrawler avancera. S'il d√©tecte qu'un obstacle est √† moins de 10 cm, il s'arr√™tera, √©mettra un signal d'alerte, puis tournera √† gauche et s'arr√™tera. Si aucun obstacle n'est d√©tect√© apr√®s le virage √† gauche, ou si la distance √† l'obstacle est sup√©rieure √† 10 cm, il continuera √† avancer.

**Code**

.. note::
    Vous pouvez **Modifier/R√©initialiser/Copier/Ex√©cuter/Arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre dans le r√©pertoire du code source, tel que ``picrawler\examples``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

    from picrawler import Picrawler
    from robot_hat import TTS, Music
    from robot_hat import Ultrasonic
    from robot_hat import Pin
    import time

    tts = TTS()
    music = Music()

    crawler = Picrawler() 
    sonar = Ultrasonic(Pin("D2") ,Pin("D3"))
    music.music_set_volume(100)

    alert_distance = 15
    speed = 80

    def main():
        distance = sonar.read()
        print(distance)
        if distance < 0:
            pass
        elif distance <= alert_distance:
            try:
                music.sound_play_threading('./sounds/sign.wav', volume=100)
            except Exception as e:
                print(e)
            crawler.do_action('turn left angle',3,speed)
            time.sleep(0.2)
        else :
            crawler.do_action('forward', 1,speed)
            time.sleep(0.2)

    if __name__ == "__main__":
        while True:
            main()

**Comment √ßa fonctionne ?**

Vous pouvez obtenir la distance en important la classe ``Ultrasonic``.

.. code-block:: python

    from robot_hat import Ultrasonic

Ensuite, initialisez les broches du module ultrasonique.

.. code-block:: python

    sonar = Ultrasonic(Pin("D2") ,Pin("D3"))


Voici le programme principal.

* Lisez la ``distance`` d√©tect√©e par le module ultrasonique et filtrez les valeurs inf√©rieures √† 0 (lorsque le module ultrasonique est trop √©loign√© de l'obstacle ou qu'il ne peut pas lire les donn√©es correctement, ``distance < 0`` appara√Ætra).
* Lorsque la ``distance`` est inf√©rieure ou √©gale √† ``alert_distance`` (la valeur seuil d√©finie pr√©c√©demment, soit 10), le son ``sign.wav`` est jou√©. PiCrawler effectue un ``virage √† gauche``.
* Lorsque la ``distance`` est sup√©rieure √† ``alert_distance``, PiCrawler se d√©place ``en avant``.

.. code-block:: python

    distance = sonar.read()
    print(distance)
    if distance < 0:
        pass
    elif distance <= alert_distance:
        try:
            music.sound_play_threading('./sounds/sign.wav', volume=100)
        except Exception as e:
            print(e)
        crawler.do_action('turn left angle',3,speed)
        time.sleep(0.2)
    else :
        crawler.do_action('forward', 1,speed)
        time.sleep(0.2)


.. note::

    Vous pouvez ajouter diff√©rents effets sonores ou musiques dans les dossiers ``musics`` ou ``sounds`` via :ref:`filezilla`.
