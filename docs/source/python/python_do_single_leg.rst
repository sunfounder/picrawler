.. note:: 

    Bonjour, bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et obtenez des aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions et concours festifs** : Participez √† des concours et √† des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_posture:

Ajuster la posture
=====================

Dans cet exemple, nous utilisons le clavier pour contr√¥ler le PiCrawler, pied par pied, et adopter la posture souhait√©e.

Vous pouvez appuyer sur la barre d'espace pour afficher les valeurs de coordonn√©es actuelles. Ces valeurs sont utiles lorsque vous cr√©ez des actions uniques pour le PiCrawler.

.. image:: img/1cood.A.png

**Ex√©cuter le code**

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picrawler/examples
    sudo python3 do_single_leg.py

Apr√®s avoir ex√©cut√© le code, veuillez suivre les instructions qui appara√Ætront dans le terminal.

* Appuyez sur ``1234`` pour s√©lectionner chaque patte s√©par√©ment, ``1`` : patte avant droite, ``2`` : patte avant gauche, ``3`` : patte arri√®re gauche, ``4`` : patte arri√®re droite
* Appuyez sur ``w``, ``a``, ``s``, ``d``, ``r`` et ``f`` pour contr√¥ler lentement les valeurs de coordonn√©es du PiCrawler.
* Appuyez sur ``Ctrl+C`` pour quitter.


**Code**

.. code-block:: python

    from picrawler import Picrawler
    from time import sleep
    import readchar

    crawler = Picrawler()
    speed = 80


    manual = '''
    -------- PiCrawler Controller --------- 
           .......          .......
        <=|   2   |‚îå-‚îå‚îê‚îå‚îê-‚îê|   1   |=>
           ``````` ‚îú      ‚î§ ```````
           ....... ‚îú      ‚î§ .......
        <=|   3   |‚îî------‚îò|   4   |=>
           ```````          ```````
        1: Select right front leg
        2: Select left front leg
        3: Select left rear leg
        4: Select right rear leg

        W: Y++          R: Z++             
        A: X--          F: Z-- 
        S: Y--  
        D: X++          Ctrl+C: Quit
    '''
    legs_list = ['right front', 'left front', 'left rear', 'right rear']

    def main():  
        leg = 0
        speed = 80
        step = 2
        print(manual)
        crawler.do_step('stand', speed)
        sleep(0.2)
        coordinate=crawler.current_step_all_leg_value()  

        def show_info():
            print("\033[H\033[J", end='')  # Effacer la fen√™tre du terminal
            print(manual)   
            print('%s : %s'%(leg+1, legs_list[leg])) 
            print('coordinate: %s'%(coordinate))  

        show_info()

        while True:
            # lire la touche
            key = readchar.readkey()
            key = key.lower()
            # s√©lectionner la patte 
            if key in ('1234'):
                leg = int(key) - 1
                show_info()
            # mouvement
            elif key in ('wsadrf'):         
                if 'w' == key:
                    coordinate[leg][1]=coordinate[leg][1] + step    
                elif 's' == key:
                    coordinate[leg][1]=coordinate[leg][1] - step           
                elif 'a' == key:
                    coordinate[leg][0]=coordinate[leg][0] - step         
                elif 'd' == key:
                    coordinate[leg][0]=coordinate[leg][0] + step   
                elif 'r' == key:
                    coordinate[leg][2]=coordinate[leg][2] + step         
                elif 'f' == key:
                    coordinate[leg][2]=coordinate[leg][2] - step 

                crawler.do_single_leg(leg,coordinate[leg],speed) 
                sleep(0.1)  
                # coordinate = crawler.current_step_all_leg_value()
                show_info()

            sleep(0.05)

    
    if __name__ == "__main__": 
        main()

* ``current_step_all_leg_value()`` : Retourne les valeurs des coordonn√©es de toutes les pattes.
* ``do_single_leg(leg, coordinate[leg], speed)`` : Modifie les coordonn√©es d'une patte sp√©cifique.
