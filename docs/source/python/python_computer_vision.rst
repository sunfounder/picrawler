.. note:: 

    Bonjour, bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et obtenez des aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions et concours festifs** : Participez √† des concours et √† des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_vision:

Vision par ordinateur
=======================

Ce projet entre officiellement dans le domaine de la vision par ordinateur !

**Ex√©cuter le code**

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picrawler/examples
    sudo python3 display.py

**Voir l'image**

Apr√®s l'ex√©cution du code, le terminal affichera l'invite suivante :

.. code-block::

    No desktop !
    * Serving Flask app "vilib.vilib" (lazy loading)
    * Environment: production
    WARNING: Do not use the development server in a production environment.
    Use a production WSGI server instead.
    * Debug mode: off
    * Running on http://0.0.0.0:9000/ (Press CTRL+C to quit)

Vous pouvez alors entrer ``http://<votre IP>:9000/mjpg`` dans le navigateur pour afficher l'√©cran vid√©o. Par exemple : ``https://192.168.18.113:9000/mjpg``

.. image:: img/display.png


Apr√®s l'ex√©cution du programme, vous verrez les informations suivantes √† la fin :


* Tapez une touche pour appeler la fonction !
* ``q`` : Prendre une photo
* ``1`` : D√©tection de couleur : rouge
* ``2`` : D√©tection de couleur : orange
* ``3`` : D√©tection de couleur : jaune
* ``4`` : D√©tection de couleur : vert
* ``5`` : D√©tection de couleur : bleu
* ``6`` : D√©tection de couleur : violet
* ``0`` : D√©sactiver la d√©tection de couleur
* ``r`` : Scanner le QR code
* ``f`` : Activer/D√©sactiver la d√©tection faciale
* ``s`` : Afficher les informations des objets d√©tect√©s

Veuillez suivre les instructions pour activer les fonctions correspondantes.

    *  **Prendre une photo**

        Tapez ``q`` dans le terminal et appuyez sur Entr√©e. L'image actuellement vue par la cam√©ra sera sauvegard√©e (si la fonction de d√©tection de couleur est activ√©e, le cadre sera √©galement visible dans l'image enregistr√©e). Vous pouvez voir ces photos dans le r√©pertoire ``~/Pictures/PiCrawler/`` de votre Raspberry Pi.
        Vous pouvez utiliser des outils comme :ref:`filezilla` pour transf√©rer les photos vers votre PC.
        

    *  **D√©tection de couleur**

        En entrant un chiffre entre ``1~6``, l'une des couleurs suivantes sera d√©tect√©e : "rouge, orange, jaune, vert, bleu, violet". Entrez ``0`` pour d√©sactiver la d√©tection de couleur.

        .. image:: img/DTC2.png

        .. note:: Vous pouvez t√©l√©charger et imprimer les :download:`Cartes de couleur PDF <https://github.com/sunfounder/sf-pdf/raw/master/prop_card/object_detection/color-cards.pdf>` pour la d√©tection de couleur.


    *  **D√©tection faciale**

        Tapez ``f`` pour activer la d√©tection faciale.

        .. image:: img/DTC5.png

    *  **D√©tection de QR Code**

        Tapez ``r`` pour activer la reconnaissance des QR codes. Aucune autre op√©ration ne peut √™tre effectu√©e tant que le QR code n'est pas reconnu. Les informations d√©cod√©es du QR code seront affich√©es dans le terminal.

        .. image:: img/DTC4.png

    *  **Afficher les informations**

        En entrant ``s``, les informations sur la d√©tection faciale (et de couleur) seront affich√©es dans le terminal. Cela inclut les coordonn√©es du centre (X, Y) et la taille (Largeur, Hauteur) de l'objet mesur√©.


**Code**

.. code-block:: python

    from vilib import Vilib
    from time import sleep, time, strftime, localtime
    import threading
    from os import getlogin
    
    USERNAME = getlogin()
    PICTURE_PATH = f"/home/{USERNAME}/Pictures/"
    
    
    flag_face = False
    flag_color = False
    qr_code_flag = False
    
    MANUAL = '''
    Input key to call the function!
        q: Take photo
        1: Color detect : red
        2: Color detect : orange
        3: Color detect : yellow
        4: Color detect : green
        5: Color detect : blue
        6: Color detect : purple
        0: Switch off Color detect
        r: Scan the QR code
        f: Switch ON/OFF face detect
        s: Display detected object information
    '''
    
    color_list = ['close', 'red', 'orange', 'yellow', 
            'green', 'blue', 'purple',
    ]
    
    def face_detect(flag):
        print("Face Detect:" + str(flag))
        Vilib.face_detect_switch(flag)
    
    
    def qrcode_detect():
        global qr_code_flag
        if qr_code_flag == True:
            Vilib.qrcode_detect_switch(True)
            print("Waitting for QR code")
    
        text = None
        while True:
            temp = Vilib.detect_obj_parameter['qr_data']
            if temp != "None" and temp != text: 
                text = temp         
                print('QR code:%s'%text)
            if qr_code_flag == False:          
                break
            sleep(0.5)
        Vilib.qrcode_detect_switch(False)
    
    
    def take_photo():
        _time = strftime('%Y-%m-%d-%H-%M-%S',localtime(time()))
        name = 'photo_%s'%_time
        Vilib.take_photo(name, PICTURE_PATH)
        print('photo save as %s%s.jpg'%(PICTURE_PATH, name))
    
    
    def object_show():
        global flag_color, flag_face
    
        if flag_color is True:
            if Vilib.detect_obj_parameter['color_n'] == 0:
                print('Color Detect: None')
            else:
                color_coodinate = (Vilib.detect_obj_parameter['color_x'],Vilib.detect_obj_parameter['color_y'])
                color_size = (Vilib.detect_obj_parameter['color_w'],Vilib.detect_obj_parameter['color_h'])
                print("[Color Detect] ","Coordinate:",color_coodinate,"Size",color_size)
    
        if flag_face is True:
            if Vilib.detect_obj_parameter['human_n'] == 0:
                print('Face Detect: None')
            else:
                human_coodinate = (Vilib.detect_obj_parameter['human_x'],Vilib.detect_obj_parameter['human_y'])
                human_size = (Vilib.detect_obj_parameter['human_w'],Vilib.detect_obj_parameter['human_h'])
                print("[Face Detect] ","Coordinate:",human_coodinate,"Size",human_size)
    
    
    def main():
        global flag_face, flag_color, qr_code_flag
        qrcode_thread = None
    
        Vilib.camera_start(vflip=False,hflip=False)
        Vilib.display(local=True,web=True)
        print(MANUAL)
    
        while True:
            # lire la touche
            key = input()
            key = key.lower()
            # prendre une photo
            if key == 'q':
                take_photo()
            # d√©tection de couleur         
            elif key != '' and key in ('0123456'):  # '' in ('0123') -> True
                index = int(key)
                if index == 0:
                    flag_color = False
                    Vilib.color_detect('close')
                else:
                    flag_color = True
                    Vilib.color_detect(color_list[index]) # color_detect(color:str -> color_name/close)
                print('Color detect : %s'%color_list[index])  
            # d√©tection faciale
            elif key =="f":
                flag_face = not flag_face
                face_detect(flag_face)
            # d√©tection QR code
            elif key =="r":
                qr_code_flag = not qr_code_flag
                if qr_code_flag == True:
                    if qrcode_thread == None or not qrcode_thread.is_alive():
                        qrcode_thread = threading.Thread(target=qrcode_detect)
                        qrcode_thread.setDaemon(True)
                        qrcode_thread.start()
                else:
                    if qrcode_thread != None and qrcode_thread.is_alive(): 
                       # attendre que le thread se termine 
                        qrcode_thread.join()
                        print('QRcode Detect: close')
            # afficher les informations des objets d√©tect√©s
            elif key == "s":
                object_show()
    
            sleep(0.5)
    
    
    if __name__ == "__main__":
        main()

**Comment √ßa fonctionne ?**

La premi√®re chose √† noter ici est la fonction suivante. Ces deux fonctions vous permettent de d√©marrer la cam√©ra.

.. code-block:: python

    Vilib.camera_start()
    Vilib.display()

Fonctions li√©es √† la "d√©tection d'objets" :

* ``Vilib.face_detect_switch(True)`` : Activer/D√©sactiver la d√©tection faciale
* ``Vilib.color_detect(color)`` : Pour la d√©tection de couleur, une seule couleur peut √™tre d√©tect√©e √† la fois. Les param√®tres √† entrer sont : ``"rouge"``, ``"orange"``, ``"jaune"``, ``"vert"``, ``"bleu"``, ``"violet"``
* ``Vilib.color_detect_switch(False)`` : D√©sactiver la d√©tection de couleur
* ``Vilib.qrcode_detect_switch(False)`` : Activer/D√©sactiver la d√©tection de QR code, renvoie les donn√©es d√©cod√©es du QR code.
* ``Vilib.gesture_detect_switch(False)`` : Activer/D√©sactiver la d√©tection de gestes
* ``Vilib.traffic_sign_detect_switch(False)`` : Activer/D√©sactiver la d√©tection de panneaux de signalisation

Les informations d√©tect√©es par l'objet seront stock√©es dans le dictionnaire ``detect_obj_parameter = Manager().dict()``.

Dans le programme principal, vous pouvez y acc√©der comme ceci :

.. code-block:: python

    Vilib.detect_obj_parameter['color_x']

Les cl√©s du dictionnaire et leur utilisation sont les suivantes :

* ``color_x`` : la valeur x de la coordonn√©e du centre du bloc de couleur d√©tect√©, la plage est de 0 √† 320
* ``color_y`` : la valeur y de la coordonn√©e du centre du bloc de couleur d√©tect√©, la plage est de 0 √† 240
* ``color_w`` : la largeur du bloc de couleur d√©tect√©, la plage est de 0 √† 320
* ``color_h`` : la hauteur du bloc de couleur d√©tect√©, la plage est de 0 √† 240
* ``color_n`` : le nombre de zones de couleur d√©tect√©es
* ``human_x`` : la valeur x de la coordonn√©e du centre du visage humain d√©tect√©, la plage est de 0 √† 320
* ``human_y`` : la valeur y de la coordonn√©e du centre du visage d√©tect√©, la plage est de 0 √† 240
* ``human_w`` : la largeur du visage humain d√©tect√©, la plage est de 0 √† 320
* ``human_h`` : la hauteur du visage humain d√©tect√©, la plage est de 0 √† 240
* ``human_n`` : le nombre de visages d√©tect√©s
* ``traffic_sign_x`` : la valeur x de la coordonn√©e centrale du panneau de signalisation d√©tect√©, la plage est de 0 √† 320
* ``traffic_sign_y`` : la valeur y de la coordonn√©e centrale du panneau de signalisation d√©tect√©, la plage est de 0 √† 240
* ``traffic_sign_w`` : la largeur du panneau de signalisation d√©tect√©, la plage est de 0 √† 320
* ``traffic_sign_h`` : la hauteur du panneau de signalisation d√©tect√©, la plage est de 0 √† 240
* ``traffic_sign_t`` : le contenu du panneau de signalisation d√©tect√©, la liste des valeurs est `['stop','right','left','forward']`
* ``gesture_x`` : la valeur x de la coordonn√©e centrale du geste d√©tect√©, la plage est de 0 √† 320
* ``gesture_y`` : la valeur y de la coordonn√©e centrale du geste d√©tect√©, la plage est de 0 √† 240
* ``gesture_w`` : la largeur du geste d√©tect√©, la plage est de 0 √† 320
* ``gesture_h`` : la hauteur du geste d√©tect√©, la plage est de 0 √† 240
* ``gesture_t`` : le contenu du geste d√©tect√©, la liste des valeurs est `["paper","scissor","rock"]`
* ``qr_data`` : le contenu du QR code d√©tect√©
* ``qr_x`` : la valeur x de la coordonn√©e centrale du QR code d√©tect√©, la plage est de 0 √† 320
* ``qr_y`` : la valeur y de la coordonn√©e centrale du QR code d√©tect√©, la plage est de 0 √† 240
* ``qr_w`` : la largeur du QR code d√©tect√©, la plage est de 0 √† 320
* ``qr_h`` : la hauteur du QR code d√©tect√©, la plage est de 0 √† 320
