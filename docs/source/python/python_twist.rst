.. note:: 

    Bonjour, bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Explorez plus en profondeur l'univers du Raspberry Pi, de l'Arduino et de l'ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes post-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : B√©n√©ficiez d'un acc√®s anticip√© aux annonces de nouveaux produits et d'aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions sp√©ciales.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_twist:

Twist
==============

Nous savons d√©j√† comment faire en sorte que PiCrawler adopte une posture sp√©cifique. L'√©tape suivante consiste √† combiner plusieurs postures pour cr√©er une action continue.

Ici, les quatre pieds de PiCrawler se soul√®vent et s'abaissent par paires, en sautant au rythme de la musique.

**Ex√©cuter le code**

.. raw:: html

    <run></run>

.. code-block:: 

    cd ~/picrawler/examples
    sudo python3 twist.py


**Code**

.. note::
    Vous pouvez **modifier/r√©initialiser/copier/ex√©cuter/arr√™ter** le code ci-dessous. Mais avant cela, vous devez vous rendre dans le r√©pertoire du code source, comme ``picrawler\examples``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

    from picrawler import Picrawler
    from robot_hat import Music

    music = Music()
    crawler = Picrawler()


    def twist(speed):
        new_step=[[50, 50, -80], [50, 50, -80],[50, 50, -80], [50, 50, -80]]
        for i in range(4):
            for inc in range(30, 60, 5): 
                rise = [50,50,(-80+inc*0.5)]
                drop = [50,50,(-80-inc)]

                new_step[i]=rise
                new_step[(i+2)%4] = drop
                new_step[(i+1)%4] = rise
                new_step[(i-1)%4] = drop
                # print(new_step)
                crawler.do_step(new_step,speed)


    def main():  

        music.music_play('./musics/sports-Ahjay_Stelino.mp3')
        music.music_set_volume(20)

        while True:
            twist(speed=100) 


    if __name__ == "__main__":
        main()

**Comment √ßa fonctionne ?**

Dans ce code, il faut pr√™ter attention √† cette partie :

.. code-block:: python

    def twist(speed):
        ## [avant droit], [avant gauche], [arri√®re gauche], [arri√®re droit]
        new_step=[[50, 50, -80], [50, 50, -80],[50, 50, -80], [50, 50, -80]]
        for i in range(4):
            for inc in range(30,60,5):  
                rise = [50,50,(-80+inc*0.5)]
                drop = [50,50,(-80-inc)]

                new_step[i]=rise
                new_step[(i+2)%4] = drop
                new_step[(i+1)%4] = rise
                new_step[(i-1)%4] = drop
                crawler.do_step(new_step,speed)

En r√©sum√©, cela utilise deux boucles `for` pour faire en sorte que le tableau ``new_step`` subisse des changements r√©guliers et continus, et simultan√©ment, la fonction ``crawler.do_step()`` ex√©cute la posture pour cr√©er une action fluide.

Vous pouvez obtenir intuitivement le tableau des valeurs de coordonn√©es correspondant √† chaque posture dans :ref:`py_posture`.


De plus, l'exemple joue √©galement de la musique en arri√®re-plan. Voici comment cela est mis en ≈ìuvre.

Jouer de la musique en important les biblioth√®ques suivantes.

.. code-block:: python

    from robot_hat import Music

D√©clarez un objet Music.

.. code-block:: python

    music = Music()

Jouez la musique situ√©e dans le r√©pertoire ``picrawler/examples/musics`` et r√©glez le volume √† 20. Vous pouvez √©galement ajouter de la musique dans le dossier ``musics`` via :ref:`filezilla`.

.. code-block:: python

    music.music_play('./musics/sports-Ahjay_Stelino.mp3')
    music.music_set_volume(20)


.. note::

    Vous pouvez ajouter diff√©rents effets sonores ou musiques dans les dossiers ``musics`` ou ``sounds`` via :ref:`filezilla`.
