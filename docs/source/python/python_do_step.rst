.. note:: 

    Bonjour, bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez plus profond√©ment dans l'univers du Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez vos probl√®mes apr√®s-vente et d√©fis techniques gr√¢ce √† l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et obtenez des aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de r√©ductions exclusives sur nos produits les plus r√©cents.
    - **Promotions et concours festifs** : Participez √† des concours et √† des promotions sp√©ciales pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_pose:

Pose
=============

PiCrawler peut adopter une posture sp√©cifique en d√©finissant un tableau de coordonn√©es. Dans cet exemple, il adopte une posture avec la patte arri√®re droite lev√©e.

.. image:: img/4cood.A.png

**Ex√©cuter le code**

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picrawler/examples
    sudo python3 do_step.py


**Code**

.. raw:: html

    <run></run>

.. code-block:: python

    from picrawler import Picrawler
    from time import sleep

    crawler = Picrawler() 

    ## [avant droit], [avant gauche], [arri√®re gauche], [arri√®re droit]
    new_step=[[45, 45, -75], [45, 0, -75], [45, 0, -30], [45, 45, -75]]
    stand_step = crawler.move_list['stand'][0]

    def main():  
        while True:
            speed = 80

            print(f"stand step: {stand_step}")
            crawler.do_step(stand_step, speed)
            sleep(3)
            print(f"new step: {new_step}")
            crawler.do_step(new_step,speed)
            sleep(3)

    
    if __name__ == "__main__": 
        main()

**Comment √ßa fonctionne ?**

Dans ce code, la ligne √† surveiller est ``crawler.do_step()``.

Tout comme ``do_action()``, ``do_step()`` permet √©galement de manipuler le comportement du PiCrawler. 
La diff√©rence est que ``do_action()`` permet d'effectuer des actions continues comme ``avancer``, tandis que ``do_step()`` permet de r√©aliser des gestes individuels comme ``se tenir debout`` ou ``s'asseoir``.


Il y a deux usages pour cette fonction :

Un : Elle peut utiliser des cha√Ænes de caract√®res, en acc√©dant directement au dictionnaire ``step_list`` de la biblioth√®que ``picrawler``.

.. code-block:: python

    crawler.do_step('stand',speed) 
    # "speed" indique la vitesse de l'√©tape, la plage est de 0 √† 100.

Deux : Elle peut √©galement accepter un tableau de 4 valeurs de coordonn√©es.

.. code-block:: python

    new_step=[[45, 45, -75], [45, 0, -75], [45, 0, -30], [45, 45, -75]]
    # Ces quatre coordonn√©es servent √† contr√¥ler les quatre pattes : avant droit, avant gauche, arri√®re gauche et arri√®re droit.

Chaque patte poss√®de un syst√®me de coordonn√©es ind√©pendant. Comme montr√© ci-dessous :

.. image:: img/4cood.png

Il est n√©cessaire de mesurer les coordonn√©es de chaque orteil individuellement. Comme montr√© ci-dessous :

.. image:: img/1cood.png

√Ä propos : le ``step_list`` utilis√© dans la premi√®re m√©thode est √©galement constitu√© d'un tableau contenant 4 valeurs de coordonn√©es.

.. code-block:: python

    step_list = {

        "stand":[
            [45, 45, -50], 
            [45, 45, -50], 
            [45, 45, -50], 
            [45, 45, -50]
        ],
        "sit":[
            [45, 45, -30], 
            [45, 45, -30], 
            [45, 45, -30], 
            [45, 45, -30]
        ],
              
    }





