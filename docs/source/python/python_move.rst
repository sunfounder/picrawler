.. note:: 

    Bonjour, bienvenue dans la communaut√© des passionn√©s de Raspberry Pi, Arduino et ESP32 sur Facebook ! Plongez dans l'univers de Raspberry Pi, Arduino et ESP32 avec d'autres passionn√©s.

    **Pourquoi rejoindre ?**

    - **Support d'experts** : R√©solvez les probl√®mes apr√®s-vente et les d√©fis techniques avec l'aide de notre communaut√© et de notre √©quipe.
    - **Apprendre et partager** : √âchangez des astuces et des tutoriels pour am√©liorer vos comp√©tences.
    - **Aper√ßus exclusifs** : Acc√©dez en avant-premi√®re aux annonces de nouveaux produits et obtenez des aper√ßus exclusifs.
    - **R√©ductions sp√©ciales** : Profitez de remises exclusives sur nos produits les plus r√©cents.
    - **Promotions festives et concours** : Participez √† des concours et √† des promotions pendant les f√™tes.

    üëâ Pr√™t √† explorer et √† cr√©er avec nous ? Cliquez sur [|link_sf_facebook|] et rejoignez-nous d√®s aujourd'hui !

.. _py_move:

D√©placer
==============

Voici le premier projet de PiCrawler. Il ex√©cute sa fonction de base : se d√©placer.

.. image:: img/move.png

**Ex√©cuter le code**

.. raw:: html

    <run></run>

.. code-block::

    cd ~/picrawler/examples
    sudo python3 move.py

Apr√®s l'ex√©cution du code, PiCrawler effectuera les actions suivantes dans cet ordre : avancer, reculer, tourner √† gauche, tourner √† droite, se tenir debout.

**Code**

.. note::
    Vous pouvez **modifier/r√©initialiser/copier/ex√©cuter/arr√™ter** le code ci-dessous. Mais avant cela, vous devez acc√©der au r√©pertoire source du code, comme ``pisloth\examples``. Apr√®s avoir modifi√© le code, vous pouvez l'ex√©cuter directement pour voir l'effet.

.. raw:: html

    <run></run>

.. code-block:: python

    from picrawler import Picrawler
    from time import sleep
    
    crawler = Picrawler() 
    
    def main():  
        
        speed = 80
              
        while True:
           
            crawler.do_action('forward',2,speed)
            sleep(0.05)     
            crawler.do_action('backward',2,speed)
            sleep(0.05)          
            crawler.do_action('turn left',2,speed)
            sleep(0.05)           
            crawler.do_action('turn right',2,speed)
            sleep(0.05)  
            crawler.do_action('turn left angle',2,speed)
            sleep(0.05)  
            crawler.do_action('turn right angle',2,speed)
            sleep(0.05) 
            crawler.do_step('stand',speed)
            sleep(1)
    
    if __name__ == "__main__":
        main()


**Comment √ßa fonctionne ?**

Tout d'abord, importez la classe ``Picrawler`` depuis la biblioth√®que ``picrawler`` que vous avez install√©e, qui contient toutes les actions de PiCrawler et les fonctions qui les impl√©mentent.

.. code-block:: python

    from picrawler import Picrawler

Ensuite, instanciez la classe ``crawler`` :

.. code-block:: python

    crawler = Picrawler() 

Enfin, utilisez la fonction ``crawler.do_action()`` pour faire d√©placer PiCrawler.

.. code-block:: python
    
    crawler.do_action('forward',2,speed)    
    crawler.do_action('backward',2,speed)         
    crawler.do_action('turn left',2,speed)          
    crawler.do_action('turn right',2,speed) 
    crawler.do_action('turn left angle',2,speed) 
    crawler.do_action('turn right angle',2,speed)

En g√©n√©ral, tous les mouvements de PiCrawler peuvent √™tre r√©alis√©s avec la fonction ``do_action()``. Elle comporte trois param√®tres :

* ``motion_name`` est le nom de l'action sp√©cifique, incluant : ``forward``, ``turn right``, ``turn left``, ``backward``, ``turn left angle``, ``turn right angle``.
* ``step`` repr√©sente le nombre de fois que chaque action est effectu√©e, par d√©faut √©gal √† 1.
* ``speed`` indique la vitesse de l'action, par d√©faut √©gal √† 50, avec une plage de 0 √† 100.

De plus, ``crawler.do_step('stand',speed)`` est √©galement utilis√© ici pour faire tenir PiCrawler debout. L'utilisation de cette fonction sera expliqu√©e dans l'exemple suivant.
