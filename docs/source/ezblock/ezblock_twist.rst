.. note:: 

    こんにちは、FacebookのSunFounder Raspberry Pi & Arduino & ESP32愛好者コミュニティへようこそ！Raspberry Pi、Arduino、ESP32について、他の愛好者と一緒にさらに深く学んでいきましょう。

    **なぜ参加するべきか？**

    - **専門家によるサポート**：購入後の問題や技術的な課題を、コミュニティやチームの支援を通じて解決できます。
    - **学びと共有**：スキルを向上させるためのヒントやチュートリアルを交換できます。
    - **限定プレビュー**：新製品の発表やプレビューをいち早く見ることができます。
    - **特別割引**：最新製品に対する専用割引を享受できます。
    - **季節のプロモーションとプレゼント企画**：プレゼント企画やホリデープロモーションに参加できます。

    👉 一緒に探求し、創造を楽しみたいですか？ [|link_sf_facebook|] をクリックして、今すぐ参加しましょう！

.. _ezb_twist:

ツイスト
==================

これまでにPiCrawlerが特定のポーズを取る方法を学びましたが、次のステップはこれらのポーズを組み合わせて連続的な動作を作成することです。

ここでは、PiCrawlerの4つの足がペアで上下に動き、音楽に合わせてジャンプします。

**プログラム**

.. note::

    * 以下の画像を参考にしてプログラムを作成できます。詳細なチュートリアルについては、:ref:`ezblock:create_project_latest` をご参照ください。
    * または、EzBlock Studioの **Examples** ページで同名のコードを見つけ、 **実行** または **編集** をクリックして直接操作することもできます。

.. image:: img/twist.png
    :width: 800

**動作の仕組み**

このプログラムでは、2層のforループを使用して ``new_step`` 配列が連続的かつ規則的に変化するようにし、その一方で **do step** がポーズを実行して連続した動作を形成します。

各ポーズに対応する座標値の配列は、:ref:`ezb_posture` から直感的に取得できます。

注意すべき点は、この座標行列ブロックです：

.. image:: img/sp210928_154257.png

本質的には二次元配列であり、 **List** カテゴリー内のブロックを使って処理できます。その構造は ``[[右前],[左前],[左後],[右後]]`` です。
つまり、この例では、 ``new_step#1`` は右前に対応し、 ``new_step#2`` は左前、 ``new_step#3`` は左後、 ``new_step#4`` は右後に対応しています。
